name: Secure Deployment Pipeline
on:
  push:
    branches:
      - main
      - release/*
    paths:
      - 'meme_tracker/**'
      - 'requirements.txt'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      force:
        description: '强制部署(忽略安全检查)'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      SLACK_WEBHOOK: ${{ secrets.SLACK_DEPLOY_WEBHOOK }}
      FORCE_DEPLOY: ${{ github.event.inputs.force }}
    
    steps:
    - name: Checkout with depth 1
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup Python with caching
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'

    - name: Install dependencies with verification
      run: |
        echo "::group::依赖安装与验证"
        pip install --upgrade pip
        pip install -r requirements.txt --no-cache-dir
        
        # 验证依赖版本
        python -c "
        import importlib.metadata as metadata
        import sys
        from packaging import version
        
        required = {
            'praw': '7.8.1',
            'cryptography': '45.0.5',
            'pytest': '8.4.1',
            'python-dotenv': '1.0.1'
        }
        
        failed = False
        for pkg, expected in required.items():
            try:
                installed = metadata.version(pkg)
                if version.parse(installed) != version.parse(expected):
                    print(f'::error::依赖版本不匹配: {pkg} (需要 {expected}, 实际 {installed})')
                    failed = True
                else:
                    print(f'✓ {pkg}=={installed}')
            except metadata.PackageNotFoundError:
                print(f'::error::依赖未安装: {pkg}')
                failed = True
            except Exception as e:
                print(f'::error::验证依赖时出错: {pkg} - {str(e)}')
                failed = True
        
        if failed and os.environ.get('FORCE_DEPLOY') != 'true':
            sys.exit(1)
        "
        echo "::endgroup::"

    - name: Create deployment backup
      run: |
        echo "::group::创建部署备份"
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        BACKUP_DIR="deploy_backup_$TIMESTAMP"
        mkdir -p $BACKUP_DIR
        cp -r meme_tracker $BACKUP_DIR/
        cp requirements.txt $BACKUP_DIR/
        tar -czvf $BACKUP_DIR.tar.gz $BACKUP_DIR
        echo "BACKUP_FILE=$BACKUP_DIR.tar.gz" >> $GITHUB_ENV
        echo "::endgroup::"

    - name: Environment setup
      run: |
        echo "::group::环境配置"
        # 验证关键文件存在
        required_files=("requirements.txt" "meme_tracker/config/.env.enc" "deploy.sh" "rollback.sh")
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ] && [ ! -d "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "::error::关键文件/目录缺失: ${missing_files[*]}"
          if [ "$FORCE_DEPLOY" != "true" ]; then
            exit 1
          else
            echo "⚠️ 强制部署模式，忽略文件缺失"
          fi
        fi

        # 解密环境变量（带更详细的错误处理）
        if [ -f "meme_tracker/config/.env.enc" ]; then
          python -c "
          import os
          import sys
          from cryptography.fernet import Fernet, InvalidToken
          
          try:
              if not os.path.exists('meme_tracker/config'):
                  os.makedirs('meme_tracker/config', exist_ok=True)
              
              key = os.environ.get('ENCRYPTION_KEY')
              if not key:
                  print('::error::ENCRYPTION_KEY环境变量未设置')
                  sys.exit(1)
                  
              cipher = Fernet(key.encode())
              with open('meme_tracker/config/.env.enc', 'rb') as f:
                  encrypted = f.read()
                  try:
                      decrypted = cipher.decrypt(encrypted).decode()
                      with open('meme_tracker/config/.env', 'w') as out:
                          out.write(decrypted)
                      print('✅ 环境文件解密成功')
                      
                      # 验证环境变量
                      from dotenv import load_dotenv
                      load_dotenv('meme_tracker/config/.env')
                      required_vars = [
                          'REDDIT_CLIENT_ID', 'REDDIT_CLIENT_SECRET',
                          'REDDIT_USER_AGENT', 'DATABASE_URL'
                      ]
                      missing = [var for var in required_vars if not os.getenv(var)]
                      if missing:
                          print(f'::error::缺少环境变量: {missing}')
                          if os.environ.get('FORCE_DEPLOY') != 'true':
                              sys.exit(1)
                          else:
                              print('⚠️ 强制部署模式，忽略环境变量缺失')
                      print('✅ 环境变量验证通过')
                      
                  except InvalidToken as e:
                      print(f'::error::解密失败: {str(e)}')
                      if os.environ.get('FORCE_DEPLOY') != 'true':
                          sys.exit(1)
                      else:
                          print('⚠️ 强制部署模式，忽略解密错误')
                  except Exception as e:
                      print(f'::error::解密过程中发生错误: {str(e)}')
                      if os.environ.get('FORCE_DEPLOY') != 'true':
                          sys.exit(1)
                      else:
                          print('⚠️ 强制部署模式，忽略解密错误')
          except Exception as e:
              print(f'::error::环境设置错误: {str(e)}')
              if os.environ.get('FORCE_DEPLOY') != 'true':
                  sys.exit(1)
              else:
                  print('⚠️ 强制部署模式，忽略环境设置错误')
          "
        else
          echo "::warning::未找到加密环境文件，跳过解密步骤"
        fi
        echo "::endgroup::"

    - name: Security scans
      run: |
        echo "::group::安全扫描"
        # 安装安全工具
        pip install safety==2.4.5 bandit==1.7.5
        
        # 确保报告目录存在
        mkdir -p security_reports
        
        # 依赖漏洞扫描
        safety check --full-report --output security_reports/safety_report.json || {
          echo "::warning::Safety检查失败"
          [ "$FORCE_DEPLOY" = "true" ] || exit 1
        }
        
        # 代码安全扫描
        bandit -r meme_tracker -f json -o security_reports/bandit_report.json || {
          echo "::warning::Bandit扫描失败"
          [ "$FORCE_DEPLOY" = "true" ] || exit 1
        }
        
        # 分析扫描结果
        if [ -f "tools/analyze_security.py" ]; then
          python tools/analyze_security.py \
            security_reports/safety_report.json \
            security_reports/bandit_report.json || {
              echo "::error::发现关键安全问题"
              [ "$FORCE_DEPLOY" = "true" ] || exit 1
            }
        else
          echo "::warning::安全分析脚本不存在"
        fi
        
        # 确保报告文件存在，即使扫描失败
        touch security_reports/safety_report.json
        touch security_reports/bandit_report.json
        echo "::endgroup::"

    - name: Container security scan
      if: github.event_name == 'push'
      run: |
        echo "::group::容器安全扫描"
        # 安装Trivy
        sudo apt-get update && sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update && sudo apt-get install -y trivy || {
          echo "::error::Trivy安装失败"
          [ "$FORCE_DEPLOY" = "true" ] || exit 1
        }
        
        # 扫描镜像
        trivy image \
          --security-checks vuln,config,secret \
          --severity CRITICAL,HIGH \
          --exit-code 1 \
          --format template \
          --template "@contrib/html.tpl" \
          -o trivy_report.html \
          your-registry/meme_tracker:${{ github.sha }} || {
            echo "::error::容器扫描发现关键漏洞"
            [ "$FORCE_DEPLOY" = "true" ] || exit 1
          }
        
        # 验证镜像签名
        docker trust inspect --pretty your-registry/meme_tracker:${{ github.sha }} || {
          echo "::error::镜像签名验证失败"
          [ "$FORCE_DEPLOY" = "true" ] || exit 1
        }
        echo "::endgroup::"

    - name: Deploy with rollback
      run: |
        echo "::group::部署执行"
        set -e
        if ./deploy.sh; then
          echo "✅ 部署成功"
        else
          echo "::error::部署失败，执行回滚"
          
          # 恢复备份
          if [ -f "$BACKUP_FILE" ]; then
            tar -xzvf $BACKUP_FILE -C .
            ./rollback.sh || {
              echo "::error::回滚失败，需要手动干预"
              exit 1
            }
          else
            echo "::error::备份文件不存在，无法回滚"
            exit 1
          fi
        fi
        echo "::endgroup::"

    - name: Post-deployment verification
      run: |
        echo "::group::部署后验证"
        # 健康检查
        curl --retry 5 --retry-delay 10 --max-time 30 -sSf http://localhost:8000/healthcheck || {
          echo "::error::服务健康检查失败"
          exit 1
        }
        
        # API可用性检查
        python tools/test_api_connectivity.py || {
          echo "::error::API连接测试失败"
          exit 1
        }
        
        # 验证环境变量
        python -c "
        import os
        from dotenv import load_dotenv
        load_dotenv('meme_tracker/config/.env')
        required = ['REDDIT_CLIENT_ID', 'REDDIT_CLIENT_SECRET', 'DATABASE_URL']
        missing = [var for var in required if not os.getenv(var)]
        if missing:
            print(f'::error::部署后环境变量缺失: {missing}')
            exit(1)
        "
        echo "::endgroup::"

    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts-${{ github.run_id }}
        path: |
          $BACKUP_FILE
          security_reports/safety_report.json
          security_reports/bandit_report.json
          trivy_report.html
        retention-days: 7

    - name: Notify deployment status
      if: always()
      env:
        SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "::group::部署状态通知"
        
        # 读取安全报告
        CRITICAL_VULNS=0
        if [ -f "security_reports/safety_report.json" ]; then
          CRITICAL_VULNS=$(jq '.vulnerabilities | map(select(.severity == "CRITICAL")) | length' security_reports/safety_report.json)
        fi
        
        # 生成通知消息
        MESSAGE="部署$([ ${{ job.status }} == 'success' ] && echo '成功 ✅' || echo '失败 ❌')"
        MESSAGE+="\n仓库: ${{ github.repository }}"
        MESSAGE+="\n分支: ${{ github.ref_name }}"
        MESSAGE+="\n运行ID: ${{ github.run_id }}"
        MESSAGE+="\n强制部署: $([ ${{ inputs.force }} == 'true' ] && echo '是 ⚠️' || echo '否')"
        MESSAGE+="\n关键安全问题: $([ $CRITICAL_VULNS -gt 0 ] && echo "$CRITICAL_VULNS 个" || echo '无')"
        MESSAGE+="\n详情: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        # GitHub通知
        if [ -n "$GITHUB_TOKEN" ]; then
          echo "发送GitHub通知..."
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" \
            -d "{\"body\":\"$MESSAGE\"}" || echo "::warning::GitHub通知发送失败"
        else
          echo "::warning::GITHUB_TOKEN未设置，跳过GitHub通知"
        fi
        
        # Slack通知
        if [ -n "$SLACK_TOKEN" ]; then
          echo "发送Slack通知..."
          curl -X POST \
            -H "Authorization: Bearer $SLACK_TOKEN" \
            -H "Content-type: application/json" \
            "https://slack.com/api/chat.postMessage" \
            -d "{
              \"channel\": \"#deployments\",
              \"text\": \"$MESSAGE\",
              \"attachments\": [
                {
                  \"color\": \"$([ ${{ job.status }} == 'success' ] && echo '$([ ${{ inputs.force }} == 'true' ] && echo \"#FFA500\" || echo \"#36a64f\")' || echo '#ff0000')\",
                  \"title\": \"部署 $([ ${{ job.status }} == 'success' ] && echo '成功' || echo '失败')\",
                  \"title_link\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                  \"footer\": \"部署通知\",
                  \"ts\": $(date +%s)
                }
              ]
            }" || echo "::warning::Slack通知发送失败"
        else
          echo "::warning::SLACK_TOKEN未设置，跳过Slack通知"
        fi
        
        echo "::endgroup::"