name: Monthly Security Audit
on:
  schedule:
    - cron: "0 0 1 * *"  # 每月1日午夜运行
  workflow_dispatch:     # 允许手动触发

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .pip-cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install --cache-dir .pip-cache -r requirements.txt safety bandit
          
      - name: Run security checks
        timeout-minutes: 15
        run: |
          echo "=== Dependency Vulnerability Scan ==="
          safety check --full-report || { echo "::error::Safety check failed"; exit 1; }
          
          echo "\n=== Code Security Analysis ==="
          bandit -r meme_tracker/ -f html -o security_report.html || { echo "::error::Bandit scan failed"; exit 1; }
          
      - name: Verify report
        run: |
          if [ ! -f "security_report.html" ]; then
            echo "::error::安全报告文件未生成"
            exit 1
          fi
          
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=meme_tracker
            -Dsonar.python.version=3.11
            -Dsonar.sources=meme_tracker/
            -Dsonar.exclusions=**/test_*.py
            -Dsonar.python.bandit.reportPaths=security_report.html
          
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: |
            security_report.html
            
      - name: SonarQube Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        timeout-minutes: 5
        
      - name: Clean up cache
        if: always()
        run: |
          pip cache purge